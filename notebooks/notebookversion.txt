def fetch_prediction_data(latitude, longitude, variables=None, models="best_match"):
    """
    Fetch prediction data from the Open-Meteo API, processing hourly weather data for the last `prediction_length` days.

    Parameters:
        latitude (float): Latitude of the location.
        longitude (float): Longitude of the location.
        prediction_length (int): Number of past days to fetch data for.
        models (str): Weather model (default: "best_match").

    Returns:
        pd.DataFrame: Hourly weather data as a Pandas DataFrame or None if the API request fails.
    """
    # Set up the Open-Meteo API client with cache and retry
    cache_session = requests_cache.CachedSession('.cache', expire_after=-1)
    retry_session = retry(cache_session, retries=5, backoff_factor=0.2)
    openmeteo = openmeteo_requests.Client(session=retry_session)

    # Weather variables
    variables = [
        "temperature_2m", "relative_humidity_2m", "dew_point_2m", "precipitation",
        "rain", "snowfall", "snow_depth", "weather_code", "pressure_msl",
        "surface_pressure", "cloud_cover", "cloud_cover_low", "cloud_cover_mid",
        "cloud_cover_high", "et0_fao_evapotranspiration", "vapour_pressure_deficit",
        "wind_speed_10m", "wind_speed_120m", "wind_direction_10m", "wind_direction_120m",
        "wind_gusts_10m", "sunshine_duration"
    ]

    # API parameters
    url = "https://api.open-meteo.com/v1/forecast"
    params = {
        "latitude": latitude,
        "longitude": longitude,
        "past_hours": 48,  # Number of past days to fetch
        "forecast_hours": 48,  # Only fetch past data
        "hourly": variables,
        "models": models
    }

    try:
        # Fetch the weather data
        responses = openmeteo.weather_api(url, params=params)

        # Ensure the response is valid
        if not responses or len(responses) == 0:
            raise ValueError("No response received from the Open-Meteo API.")

        # Process first location
        response = responses[0]
        print(f"Coordinates: {response.Latitude()}°N, {response.Longitude()}°E")
        print(f"Elevation: {response.Elevation()} m asl")
        print(f"Timezone: {response.Timezone()} ({response.TimezoneAbbreviation()})")
        print(f"UTC Offset: {response.UtcOffsetSeconds()} seconds")

        # Process hourly data
        hourly = response.Hourly()
        hourly_data = {"date": pd.date_range(
            start=pd.to_datetime(hourly.Time(), unit="s", utc=True),
            end=pd.to_datetime(hourly.TimeEnd(), unit="s", utc=True),
            freq=pd.Timedelta(seconds=hourly.Interval()),
            inclusive="left"
        )}

        # Assign hourly variables
        hourly_data["temperature_2m"] = hourly.Variables(0).ValuesAsNumpy()
        hourly_data["relative_humidity_2m"] = hourly.Variables(1).ValuesAsNumpy()
        hourly_data["dew_point_2m"] = hourly.Variables(2).ValuesAsNumpy()
        hourly_data["precipitation"] = hourly.Variables(3).ValuesAsNumpy()
        hourly_data["rain"] = hourly.Variables(4).ValuesAsNumpy()
        hourly_data["snowfall"] = hourly.Variables(5).ValuesAsNumpy()
        hourly_data["snow_depth"] = hourly.Variables(6).ValuesAsNumpy()
        hourly_data["weather_code"] = hourly.Variables(7).ValuesAsNumpy()
        hourly_data["pressure_msl"] = hourly.Variables(8).ValuesAsNumpy()
        hourly_data["surface_pressure"] = hourly.Variables(9).ValuesAsNumpy()
        hourly_data["cloud_cover"] = hourly.Variables(10).ValuesAsNumpy()
        hourly_data["cloud_cover_low"] = hourly.Variables(11).ValuesAsNumpy()
        hourly_data["cloud_cover_mid"] = hourly.Variables(12).ValuesAsNumpy()
        hourly_data["cloud_cover_high"] = hourly.Variables(13).ValuesAsNumpy()
        hourly_data["et0_fao_evapotranspiration"] = hourly.Variables(14).ValuesAsNumpy()
        hourly_data["vapour_pressure_deficit"] = hourly.Variables(15).ValuesAsNumpy()
        hourly_data["wind_speed_10m"] = hourly.Variables(16).ValuesAsNumpy()
        hourly_data["wind_speed_100m"] = hourly.Variables(17).ValuesAsNumpy()  # Renamed for train dataset
        hourly_data["wind_direction_10m"] = hourly.Variables(18).ValuesAsNumpy()
        hourly_data["wind_direction_100m"] = hourly.Variables(19).ValuesAsNumpy()  # Renamed for train dataset
        hourly_data["wind_gusts_10m"] = hourly.Variables(20).ValuesAsNumpy()
        hourly_data["sunshine_duration"] = hourly.Variables(21).ValuesAsNumpy()

        # Create a DataFrame
        hourly_dataframe = pd.DataFrame(data=hourly_data)
        print(f"✅ Prediction data fetched successfully")
        print(f"Shape: {hourly_dataframe.shape}")
        print(hourly_dataframe.dtypes)
        return hourly_dataframe

    except RequestException as req_err:
        print(f"❌ API request failed due to a network issue: {req_err}")
    except ValueError as val_err:
        print(f"❌ API response error: {val_err}")
    except Exception as ex:
        print(f"❌ An unexpected error occurred: {ex}")

    # Return None if the data could not be fetched
    return None
